(1) Option 1 : From Sprign boot to create image:
	-   in pom.xml add teh following configuration to maven-plugin:( refer D:\OneDrive\Study\Java\Eclipse2020-03WorkplaceOct2020\currency-conversion-service-v3)
	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
<!--  maven plugin is also used to create an image for our container -->				
				<configuration>
					<image>
						<name>mailsonymathew/mmv2-${project.artifactId}:${project.version}</name>
					</image>
					<pullPolicy>IF_NOT_PRESENT</pullPolicy>
				</configuration>				
			</plugin>
		</plugins>
	</build>

	
	(a) Right click on project -> Run as-> Maven Build(2nd Option):
		- Goals = spring-boot:build-image -DskipTests  -> skip tests saves time
				OR
		  Goals =  spring-boot:build-image   -> use this in projects
   
	(b) Alternative to Second step:
		- cmd prompt-> cd to project folder -> mvn spring-boot:build-image


(2) Option 2: Use Spotify Docker plugin 
-   in pom.xml add teh following configuration to maven-plugin:
	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
			<!-- Docker -->
			<plugin>
				<groupId>com.spotify</groupId>
				<artifactId>dockerfile-maven-plugin</artifactId>
				<version>1.4.13</version>
				<executions>
					<execution>
						<id>default</id>
						<goals>
							<goal>build</goal>
							<!-- <goal>push</goal> -->
						</goals>
					</execution>
				</executions>
				<configuration>
					<repository>mailsonymathew/${project.name}</repository>
					<tag>${project.version}</tag>
					<skipDockerInfo>true</skipDockerInfo>
				</configuration>
			</plugin>
		</plugins>
	</build>


	(a) Right click on project -> Run as-> Maven Build(2nd option):
		- Goals = clean package

   
	(b) Alternative to Second step:
		- cmd prompt-> cd to project folder -> mvn clean package

(3) Option 3 :
	- Using google jib:

		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>

			<!-- plugin for google jib -->
			<plugin>
				<groupId>com.google.cloud.tools</groupId>
				<artifactId>jib-maven-plugin</artifactId>
				<version>3.4.3</version>
				<configuration>
					<from>
						<image>openjdk:22</image>
					</from>
					<to>
						<image>docker.io/mailsonymathew/bookapp-testing-demo:1.0</image>
						<auth>
							<username>mailsonymathew</username>
						</auth>
					</to>
				</configuration>
			</plugin>
		</plugins>

    - IntellIj -> Maven -> Plugins -> jib -> jib:build
            - You should see a message "Build Success" if imae is built successfully

    - Go to Docker Hub: docker.io :
            - You should be able to see your image 


(4) Option 4 : From docker file:
	- Create docker file 
	- execute command : docker build -t reponame/imagename:tag .
		E.g.: docker build -t mailsonymathew/microservice-v1:0.0.1.RELEASE .


(5) Manual create: 
	- Run a container: 
		- cmd:docker run -p 5000:5000 -d mailsonymathew/06-todo-rest-api-h2-containerized:1.0.0.RELEASE
	- Exec into container and create a directory:
		- cmd:docker exec -it 86ce01b20708 touch /tmp/execWorks
		- cmd: docker exec -it 86ce01b20708 ls tmp
		- cmd: docker exec -it 86ce01b20708 ls
	- Commit the chages to create ne wimage:
		- cmd: docker commit -m "message" 86ce01b20708 mailsonymathew/06-todo-rest-api-h2-containerized:2.0.0.RELEASE

